package BlocKuzushi;

import java.awt.Image;
import javax.imageio.ImageIO;
import java.io.IOException;
import java.io.File;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.geom.Line2D;

public class Block {
    public static final int WIDTH = 40;
    public static final int HEIGHT = 15;

    private int x, y; 
    private boolean isPainted;
    private Image block;
    private String type;

    public String getType() {
        return type;
    }

    public Block(int x, int y, String type) {
        this.x = x;
        this.y = y;
        this.type = type;
        isPainted = true;
        try {
            if (type.equals("red")) {
                block = ImageIO.read(new File("img/block_red.png"));
            } else if (type.equals("blue")) {
                block = ImageIO.read(new File("img/block_blue.png"));
            } else {    
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void draw(Graphics g) { 
        g.drawImage(block, 100, 100, null);
    }

    public void delete() {
        isPainted = false; 
    }

    public boolean isPainted() {
        return isPainted;
    }

    public boolean intersects(int x, int y, int width, int height) {
        Rectangle thisRect = new Rectangle(this.x, this.y, WIDTH, HEIGHT);
        Rectangle targetRect = new Rectangle(x, y, width, height);
        return thisRect.intersects(targetRect); 
    }

    public boolean ballHit(Ball ball) {
        Line2D.Float[] blockLines = getBlockLines();

        Rectangle ballRect = new Rectangle(ball.getX(), ball.getY(), ball.getSize(), ball.getSize());

        for (Line2D.Float blockLine : blockLines) {
            if (blockLine.intersects(ballRect)) {
                int collisionSide = getCollisionSide(blockLine, ball.getX(), ball.getY(), ball.getSize());
                if (collisionSide == 0) {
                    ball.bounceY();
                } else {
                    ball.bounceX();
                }
                delete();
                return true;
            }
        }
        return false;
    }

    private Line2D.Float[] getBlockLines() {
        Line2D.Float[] lines = new Line2D.Float[4];
        lines[0] = new Line2D.Float(x, y, x + WIDTH, y);
        lines[1] = new Line2D.Float(x + WIDTH, y, x + WIDTH, y + HEIGHT);
        lines[2] = new Line2D.Float(x, y + HEIGHT, x + WIDTH, y + HEIGHT);
        lines[3] = new Line2D.Float(x, y, x, y + HEIGHT);
        return lines;
    }

    private int getCollisionSide(Line2D.Float line, int ballX, int ballY, int ballSize) {
        double slope = (line.y2 - line.y1) / (line.x2 - line.x1);
        double yIntercept = line.y1 - slope * line.x1; // x = 0
        double ballCenterX = ballX + ballSize / 2;
        double ballCenterY = ballY + ballSize / 2;

        double ballLineY = slope * ballCenterX + yIntercept; //yâˆ’Slope*x

        if (Math.abs(ballCenterY - ballLineY) < ballSize / 2.0) {
            if (ballCenterX < line.x1 || ballCenterX > line.x2) {
                return 1;
            } else {
                return 0;
            }
        } else {
            if (ballCenterY < line.y1 || ballCenterY > line.y2) {
                return 0;
            } else {
                return 1;
            }
        }
    }
}
